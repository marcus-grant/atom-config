(function() {
  var MarkdownPreviewView, mathjaxHelper, path, renderer;

  path = require('path');

  MarkdownPreviewView = require('../lib/markdown-preview-view');

  mathjaxHelper = require('../lib/mathjax-helper');

  renderer = require('../lib/renderer');

  describe("the difference algorithm that updates the preview", function() {
    var editor, loadPreviewInSplitPane, preview, ref, workspaceElement;
    ref = [], editor = ref[0], preview = ref[1], workspaceElement = ref[2];
    beforeEach(function() {
      jasmine.useRealClock();
      workspaceElement = atom.views.getView(atom.workspace);
      jasmine.attachToDOM(workspaceElement);
      waitsForPromise(function() {
        return atom.packages.activatePackage("markdown-preview-plus");
      });
      waitsForPromise(function() {
        return atom.workspace.open(path.join(__dirname, 'fixtures', 'sync.md'));
      });
      return runs(function() {
        return editor = atom.workspace.getPanes()[0].getActiveItem();
      });
    });
    afterEach(function() {
      return preview.destroy();
    });
    loadPreviewInSplitPane = function() {
      runs(function() {
        return atom.commands.dispatch(workspaceElement, 'markdown-preview-plus:toggle');
      });
      waitsFor(function() {
        return atom.workspace.getCenter().getPanes().length === 2;
      });
      waitsFor("markdown preview to be created", function() {
        return preview = atom.workspace.getCenter().getPanes()[1].getActiveItem();
      });
      return runs(function() {
        expect(preview).toBeInstanceOf(MarkdownPreviewView);
        return expect(preview.getPath()).toBe(atom.workspace.getActivePaneItem().getPath());
      });
    };
    describe("updating ordered lists start number", function() {
      var expectOrderedListsToStartAt, orderedLists;
      orderedLists = [][0];
      beforeEach(function() {
        loadPreviewInSplitPane();
        return runs(function() {
          return orderedLists = preview.find('ol');
        });
      });
      expectOrderedListsToStartAt = function(startNumbers) {
        return runs(function() {
          var i, j, ref1;
          for (i = j = 0, ref1 = startNumbers.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
            if (startNumbers[i] === "1") {
              expect(orderedLists[i].getAttribute('start')).not.toExist();
            } else {
              expect(orderedLists[i].getAttribute('start')).toBe(startNumbers[i]);
            }
          }
        });
      };
      it("sets the start attribute when the start number isn't 1", function() {
        expectOrderedListsToStartAt(["1", "1", "1", "1", "1"]);
        runs(function() {
          return editor.setTextInBufferRange([[35, 0], [35, 12]], "2. Ordered 1");
        });
        waitsFor("1st ordered list start attribute to update", function() {
          return orderedLists[0].getAttribute('start') != null;
        });
        expectOrderedListsToStartAt(["2", "1", "1", "1", "1"]);
        runs(function() {
          return editor.setTextInBufferRange([[148, 0], [148, 14]], "> 2. Ordered 1");
        });
        waitsFor("ordered list nested in blockquote start attribute to update", function() {
          return orderedLists[2].getAttribute('start') != null;
        });
        expectOrderedListsToStartAt(["2", "1", "2", "1", "1"]);
        runs(function() {
          return editor.setTextInBufferRange([[205, 0], [205, 14]], "  2. Ordered 1");
        });
        waitsFor("ordered list nested in unordered list start attribute to update", function() {
          return orderedLists[3].getAttribute('start') != null;
        });
        return expectOrderedListsToStartAt(["2", "1", "2", "2", "1"]);
      });
      return it("removes the start attribute when the start number is changed to 1", function() {
        editor.setTextInBufferRange([[35, 0], [35, 12]], "2. Ordered 1");
        editor.setTextInBufferRange([[148, 0], [148, 14]], "> 2. Ordered 1");
        editor.setTextInBufferRange([[205, 0], [205, 14]], "  2. Ordered 1");
        waitsFor("ordered lists start attributes to update", function() {
          return (orderedLists[0].getAttribute('start') != null) && (orderedLists[2].getAttribute('start') != null) && (orderedLists[3].getAttribute('start') != null);
        });
        expectOrderedListsToStartAt(["2", "1", "2", "2", "1"]);
        runs(function() {
          return editor.setTextInBufferRange([[35, 0], [35, 12]], "1. Ordered 1");
        });
        waitsFor("1st ordered list start attribute to be removed", function() {
          return orderedLists[0].getAttribute('start') == null;
        });
        expectOrderedListsToStartAt(["1", "1", "2", "2", "1"]);
        runs(function() {
          return editor.setTextInBufferRange([[148, 0], [148, 14]], "> 1. Ordered 1");
        });
        waitsFor("ordered list nested in blockquote start attribute to be removed", function() {
          return orderedLists[2].getAttribute('start') == null;
        });
        expectOrderedListsToStartAt(["1", "1", "1", "2", "1"]);
        runs(function() {
          return editor.setTextInBufferRange([[205, 0], [205, 14]], "  1. Ordered 1");
        });
        waitsFor("ordered list nested in unordered list start attribute to be removed", function() {
          return orderedLists[3].getAttribute('start') == null;
        });
        return expectOrderedListsToStartAt(["1", "1", "1", "1", "1"]);
      });
    });
    describe("when a maths block is modified", function() {
      var mathBlocks;
      mathBlocks = [][0];
      beforeEach(function() {
        waitsFor("LaTeX rendering to be enabled", function() {
          return atom.config.set('markdown-preview-plus.enableLatexRenderingByDefault', true);
        });
        loadPreviewInSplitPane();
        waitsFor("MathJax to load", function() {
          return typeof MathJax !== "undefined" && MathJax !== null;
        });
        waitsFor("preview to update DOM with span.math containers", function() {
          mathBlocks = preview.find('script[type*="math/tex"]').parent();
          return mathBlocks.length === 20;
        });
        return waitsFor("Maths blocks to be processed by MathJax", function() {
          mathBlocks = preview.find('script[type*="math/tex"]').parent();
          return mathBlocks.children('span.MathJax, div.MathJax_Display').not('.MathJax_Processing').length === 20;
        });
      });
      afterEach(function() {
        return mathjaxHelper.resetMathJax();
      });
      it("replaces the entire span.math container element", function() {
        spyOn(mathjaxHelper, 'mathProcessor').andCallFake(function() {});
        runs(function() {
          return editor.setTextInBufferRange([[46, 0], [46, 43]], "E=mc^2");
        });
        waitsFor("mathjaxHelper.mathProcessor to be called", function() {
          return mathjaxHelper.mathProcessor.calls.length;
        });
        return runs(function() {
          var mathHTMLCSS, modMathBlock;
          mathBlocks = preview.find('script[type*="math/tex"]').parent();
          expect(mathBlocks.length).toBe(20);
          mathHTMLCSS = mathBlocks.children('span.MathJax, div.MathJax_Display');
          expect(mathHTMLCSS.length).toBe(19);
          modMathBlock = mathBlocks.eq(2);
          expect(modMathBlock.children().length).toBe(1);
          return expect(modMathBlock.children('script').text()).toBe("E=mc^2\n");
        });
      });
      return it("subsequently only rerenders the maths block that was modified", function() {
        var unprocessedMathBlocks;
        unprocessedMathBlocks = [][0];
        spyOn(mathjaxHelper, 'mathProcessor').andCallFake(function(domElements) {
          return unprocessedMathBlocks = domElements;
        });
        runs(function() {
          return editor.setTextInBufferRange([[46, 0], [46, 43]], "E=mc^2");
        });
        waitsFor("mathjaxHelper.mathProcessor to be called", function() {
          return mathjaxHelper.mathProcessor.calls.length;
        });
        return runs(function() {
          expect(unprocessedMathBlocks.length).toBe(1);
          expect(unprocessedMathBlocks[0].tagName.toLowerCase()).toBe('span');
          expect(unprocessedMathBlocks[0].className).toBe('math');
          expect(unprocessedMathBlocks[0].children.length).toBe(1);
          return expect(unprocessedMathBlocks[0].children[0].textContent).toBe("E=mc^2\n");
        });
      });
    });
    return describe("when a code block is modified", function() {
      return it("replaces the entire span.atom-text-editor container element", function() {
        loadPreviewInSplitPane();
        runs(function() {
          var atomTextEditors, codeBlocks;
          codeBlocks = preview.find('span.atom-text-editor');
          expect(codeBlocks.length).toBe(5);
          expect(codeBlocks.children().length).toBe(5);
          atomTextEditors = codeBlocks.children('atom-text-editor');
          expect(atomTextEditors.length).toBe(5);
          spyOn(renderer, 'convertCodeBlocksToAtomEditors').andCallFake(function() {});
          return editor.setTextInBufferRange([[24, 0], [24, 9]], "This is a modified");
        });
        waitsFor("renderer.convertCodeBlocksToAtomEditors to be called", function() {
          return renderer.convertCodeBlocksToAtomEditors.calls.length;
        });
        return runs(function() {
          var atomTextEditors, codeBlocks, modCodeBlock;
          codeBlocks = preview.find('span.atom-text-editor');
          expect(codeBlocks.length).toBe(5);
          expect(codeBlocks.children().length).toBe(5);
          atomTextEditors = codeBlocks.children('atom-text-editor');
          expect(atomTextEditors.length).toBe(4);
          modCodeBlock = codeBlocks.eq(0);
          expect(modCodeBlock.children().length).toBe(1);
          return expect(modCodeBlock.children().prop('tagName').toLowerCase()).toBe('pre');
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
